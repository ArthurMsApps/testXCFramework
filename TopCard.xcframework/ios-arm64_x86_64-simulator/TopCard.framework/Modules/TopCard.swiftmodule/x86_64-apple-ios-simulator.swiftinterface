// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TopCard
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreNFC
import Foundation
import Swift
@_exported import TopCard
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public protocol NFCViewControllerDelegate {
  func sendPostMessage(action: Swift.String, data: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NFCViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TopCard.NFCViewController : CoreNFC.NFCTagReaderSessionDelegate {
  @_Concurrency.MainActor(unsafe) public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  @_Concurrency.MainActor(unsafe) public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
public protocol TopCardDelegate {
  func fetchUser(completion: (Swift.String?) -> Swift.Void)
  func returnToRegister(context: UIKit.UIViewController)
  func webSessionWasFinished()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TopCardKit : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(delegate: TopCard.TopCardDelegate, vendor: TopCard.Vendor, lang: TopCard.Language)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func initAlert(vc: UIKit.UIViewController)
  @objc deinit
}
extension TopCard.TopCardKit : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
extension TopCard.TopCardKit : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension TopCard.TopCardKit : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
}
extension TopCard.TopCardKit : TopCard.NFCViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func sendPostMessage(action: Swift.String, data: Swift.String)
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public enum Vendor : Swift.String {
  case Pango
  case Moovit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Language : Swift.String {
  case Hebrew
  case English
  case Russian
  case Arabic
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension TopCard.Vendor : Swift.Equatable {}
extension TopCard.Vendor : Swift.Hashable {}
extension TopCard.Vendor : Swift.RawRepresentable {}
extension TopCard.Language : Swift.Equatable {}
extension TopCard.Language : Swift.Hashable {}
extension TopCard.Language : Swift.RawRepresentable {}
